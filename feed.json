{
    "version": "https://jsonfeed.org/version/1",
    "title": "浣熊小怜怜",
    "subtitle": "",
    "icon": "http://kale-as.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "http://Kale-as.github.io",
    "items": [
        {
            "id": "http://kale-as.github.io/2022/05/01/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/",
            "url": "http://kale-as.github.io/2022/05/01/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/",
            "title": "Spring入门案例",
            "date_published": "2022-05-01T08:14:49.483Z",
            "content_html": "<h1 id=\"下载spring\"><a class=\"anchor\" href=\"#下载spring\">#</a> 下载 spring</h1>\n<h2 id=\"1repospringio\"><a class=\"anchor\" href=\"#1repospringio\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovLzEucmVwby5zcHJpbmcuaW8=\">1.repo.spring.io</span>(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXBvLnNwcmluZy5pby91aS9uYXRpdmUvcmVsZWFzZS9vcmcvc3ByaW5nZnJhbWV3b3JrL3NwcmluZy8=\">https://repo.spring.io/ui/native/release/org/springframework/spring/</span>)</h2>\n<h2 id=\"2打开-idea-工具创建普通-java-工程\"><a class=\"anchor\" href=\"#2打开-idea-工具创建普通-java-工程\">#</a> 2.<strong> 打开</strong> <strong>idea</strong> <strong>工具，创建普通</strong> <strong>Java</strong> <strong>工程</strong></h2>\n<h2 id=\"3导入-spring5-相关-jar-包\"><a class=\"anchor\" href=\"#3导入-spring5-相关-jar-包\">#</a> 3.<strong> 导入</strong> <strong>Spring5</strong> <strong>相关</strong> <strong>jar</strong> 包</h2>\n<h2 id=\"4创建普通类在这个类创建普通方法\"><a class=\"anchor\" href=\"#4创建普通类在这个类创建普通方法\">#</a> 4.<strong> 创建普通类，在这个类创建普通方法</strong></h2>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;add......&quot;</span>);    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5创建-spring-配置文件在配置文件配置创建的对象\"><a class=\"anchor\" href=\"#5创建-spring-配置文件在配置文件配置创建的对象\">#</a> <strong>5. 创建 Spring 配置文件，在配置文件配置创建的对象</strong></h2>\n<h3 id=\"1spring-配置文件使用-xml-格式\"><a class=\"anchor\" href=\"#1spring-配置文件使用-xml-格式\">#</a> （1）Spring 配置文件使用 xml 格式</h3>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span>       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置 User 对象创建--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lian.spring5.User&quot;</span>&lt;/<span class=\"attr\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6进行测试代码编写\"><a class=\"anchor\" href=\"#6进行测试代码编写\">#</a> 6.<strong> 进行测试代码编写</strong></h2>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAdd</span><span class=\"params\">()</span></span>&#123;    </span><br><span class=\"line\">    <span class=\"comment\">//1.加载spring配置文件    </span></span><br><span class=\"line\">    ApplicationContext context=<span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">&quot;bean1.xml&quot;</span>);    </span><br><span class=\"line\">    <span class=\"comment\">//2.获取配置创建的对象    </span></span><br><span class=\"line\">    User user=context.getBean(<span class=\"string\">&quot;user&quot;</span>, User.class);    \t  </span><br><span class=\"line\">    System.out.println(user);   </span><br><span class=\"line\">    user.add();&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "学习",
                "Spring"
            ]
        },
        {
            "id": "http://kale-as.github.io/2022/05/01/SpringMVC%E7%AC%94%E8%AE%B0/",
            "url": "http://kale-as.github.io/2022/05/01/SpringMVC%E7%AC%94%E8%AE%B0/",
            "title": "SpringMVC笔记",
            "date_published": "2022-05-01T07:57:46.243Z",
            "content_html": "<h1 id=\"一-springmvc简介\"><a class=\"anchor\" href=\"#一-springmvc简介\">#</a> 一、SpringMVC 简介</h1>\n<h3 id=\"1-什么是mvc\"><a class=\"anchor\" href=\"#1-什么是mvc\">#</a> 1、什么是 MVC</h3>\n<p>MVC 是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p>\n<p>M：Model，模型层，指工程中的 JavaBean，作用是处理数据</p>\n<p>JavaBean 分为两类：</p>\n<ul>\n<li>一类称为实体类 Bean：专门存储业务数据的，如 Student、User 等</li>\n<li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li>\n</ul>\n<p>V：View，视图层，指工程中的 html 或 jsp 等页面，作用是与用户进行交互，展示数据</p>\n<p>C：Controller，控制层，指工程中的 servlet，作用是接收请求和响应浏览器</p>\n<p>MVC 的工作流程：<br />\n用户通过视图层发送请求到服务器，在服务器中请求被 Controller 接收，Controller 调用相应的 Model 层处理请求，处理完毕将结果返回到 Controller，Controller 再根据请求处理的结果找到相应的 View 视图，渲染数据后最终响应给浏览器</p>\n<h3 id=\"2-什么是springmvc\"><a class=\"anchor\" href=\"#2-什么是springmvc\">#</a> 2、什么是 SpringMVC</h3>\n<p>SpringMVC 是 Spring 的一个后续产品，是 Spring 的一个子项目</p>\n<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p>\n<blockquote>\n<p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台 servlet</p>\n</blockquote>\n<h3 id=\"3-springmvc的特点\"><a class=\"anchor\" href=\"#3-springmvc的特点\">#</a> 3、SpringMVC 的特点</h3>\n<ul>\n<li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li>\n<li><strong>基于原生的 Servlet</strong>，通过了功能强大的<strong>前端控制器 DispatcherServlet</strong>，对请求和响应进行统一处理</li>\n<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li>\n<li><strong>代码清新简洁</strong>，大幅度提升开发效率</li>\n<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li>\n<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>\n</ul>\n<h1 id=\"二-helloworld\"><a class=\"anchor\" href=\"#二-helloworld\">#</a> 二、HelloWorld</h1>\n<h3 id=\"1-开发环境\"><a class=\"anchor\" href=\"#1-开发环境\">#</a> 1、开发环境</h3>\n<p>IDE：idea 2019.2</p>\n<p>构建工具：maven3.5.4</p>\n<p>服务器：tomcat7</p>\n<p>Spring 版本：5.3.1</p>\n<h3 id=\"2-创建maven工程\"><a class=\"anchor\" href=\"#2-创建maven工程\">#</a> 2、创建 maven 工程</h3>\n<h5 id=\"a添加web模块\"><a class=\"anchor\" href=\"#a添加web模块\">#</a> a &gt; 添加 web 模块</h5>\n<h5 id=\"b打包方式war\"><a class=\"anchor\" href=\"#b打包方式war\">#</a> b &gt; 打包方式：war</h5>\n<h5 id=\"c引入依赖\"><a class=\"anchor\" href=\"#c引入依赖\">#</a> c &gt; 引入依赖</h5>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- SpringMVC --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ServletAPI --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf-spring5<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.12.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p>\n<p><img data-src=\"img%5Cimg001.png\" alt=\"images\" /></p>\n<h3 id=\"3-配置webxml\"><a class=\"anchor\" href=\"#3-配置webxml\">#</a> 3、配置 web.xml</h3>\n<p>注册 SpringMVC 的前端控制器 DispatcherServlet</p>\n<h5 id=\"a默认配置方式\"><a class=\"anchor\" href=\"#a默认配置方式\">#</a> a &gt; 默认配置方式</h5>\n<p>此配置作用下，SpringMVC 的配置文件默认位于 WEB-INF 下，默认名称为 &lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应 SpringMVC 的配置文件位于 WEB-INF 下，文件名为 springMVC-servlet.xml</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class=\"line\"><span class=\"comment\">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class=\"line\"><span class=\"comment\">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"b扩展配置方式\"><a class=\"anchor\" href=\"#b扩展配置方式\">#</a> b &gt; 扩展配置方式</h5>\n<p>可通过 init-param 标签设置 SpringMVC 配置文件的位置和名称，通过 load-on-startup 标签设置 SpringMVC 前端控制器 DispatcherServlet 的初始化时间</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springMVC.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\"> \t\t作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class=\"line\"><span class=\"comment\">\t\t而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class=\"line\"><span class=\"comment\">\t\t因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class=\"line\"><span class=\"comment\">\t--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class=\"line\"><span class=\"comment\">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class=\"line\"><span class=\"comment\">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<p>&lt;url-pattern&gt; 标签中使用 / 和 /* 的区别：</p>\n<p>/ 所匹配的请求可以是 /login 或.html 或.js 或.css 方式的请求路径，但是 / 不能匹配.jsp 请求路径的请求</p>\n<p>因此就可以避免在访问 jsp 页面时，该请求被 DispatcherServlet 处理，从而找不到相应的页面</p>\n<p>/* 则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用 /* 的写法</p>\n</blockquote>\n<h3 id=\"4-创建请求控制器\"><a class=\"anchor\" href=\"#4-创建请求控制器\">#</a> 4、创建请求控制器</h3>\n<p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p>\n<p>请求控制器中每一个处理请求的方法成为控制器方法</p>\n<p>因为 SpringMVC 的控制器由一个 POJO（普通的 Java 类）担任，因此需要通过 @Controller 注解将其标识为一个控制层组件，交给 Spring 的 IoC 容器管理，此时 SpringMVC 才能够识别控制器的存在</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-创建springmvc的配置文件\"><a class=\"anchor\" href=\"#5-创建springmvc的配置文件\">#</a> 5、创建 springMVC 的配置文件</h3>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;viewResolver&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;order&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;characterEncoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 视图前缀 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 视图后缀 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.html&quot;</span>/&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;templateMode&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;characterEncoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">   处理静态资源，例如html、js、css、jpg</span></span><br><span class=\"line\"><span class=\"comment\">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class=\"line\"><span class=\"comment\">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultCharset&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-测试helloworld\"><a class=\"anchor\" href=\"#6-测试helloworld\">#</a> 6、测试 HelloWorld</h3>\n<h5 id=\"a实现对首页的访问\"><a class=\"anchor\" href=\"#a实现对首页的访问\">#</a> a &gt; 实现对首页的访问</h5>\n<p>在请求控制器中创建处理请求的方法</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class=\"line\"><span class=\"comment\">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class=\"line\"><span class=\"comment\">// localhost:8080/springMVC/</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置视图名称</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;index&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"b通过超链接跳转到指定页面\"><a class=\"anchor\" href=\"#b通过超链接跳转到指定页面\">#</a> b &gt; 通过超链接跳转到指定页面</h5>\n<p>在主页 index.html 中设置超链接</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在请求控制器中创建处理请求的方法</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">HelloWorld</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;target&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-总结\"><a class=\"anchor\" href=\"#7-总结\">#</a> 7、总结</h3>\n<p>浏览器发送请求，若请求地址符合前端控制器的 url-pattern，该请求就会被前端控制器 DispatcherServlet 处理。前端控制器会读取 SpringMVC 的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中 @RequestMapping 注解的 value 属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过 Thymeleaf 对视图进行渲染，最终转发到视图所对应页面</p>\n<h1 id=\"三-requestmapping注解\"><a class=\"anchor\" href=\"#三-requestmapping注解\">#</a> 三、@RequestMapping 注解</h1>\n<h3 id=\"1-requestmapping注解的功能\"><a class=\"anchor\" href=\"#1-requestmapping注解的功能\">#</a> 1、@RequestMapping 注解的功能</h3>\n<p>从注解名称上我们可以看到，@RequestMapping 注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>\n<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>\n<h3 id=\"2-requestmapping注解的位置\"><a class=\"anchor\" href=\"#2-requestmapping注解的位置\">#</a> 2、@RequestMapping 注解的位置</h3>\n<p>@RequestMapping 标识一个类：设置映射请求的请求路径的初始信息</p>\n<p>@RequestMapping 标识一个方法：设置映射请求请求路径的具体信息</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestMappingController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testRequestMapping</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-requestmapping注解的value属性\"><a class=\"anchor\" href=\"#3-requestmapping注解的value属性\">#</a> 3、@RequestMapping 注解的 value 属性</h3>\n<p>@RequestMapping 注解的 value 属性通过请求的请求地址匹配请求映射</p>\n<p>@RequestMapping 注解的 value 属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>\n<p>@RequestMapping 注解的 value 属性必须设置，至少通过请求地址匹配请求映射</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(</span></span><br><span class=\"line\"><span class=\"meta\">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testRequestMapping</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-requestmapping注解的method属性\"><a class=\"anchor\" href=\"#4-requestmapping注解的method属性\">#</a> 4、@RequestMapping 注解的 method 属性</h3>\n<p>@RequestMapping 注解的 method 属性通过请求的请求方式（get 或 post）匹配请求映射</p>\n<p>@RequestMapping 注解的 method 属性是一个 RequestMethod 类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>\n<p>若当前请求的请求地址满足请求映射的 value 属性，但是请求方式不满足 method 属性，则浏览器报错 405：Request method 'POST' not supported</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/test&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(</span></span><br><span class=\"line\"><span class=\"meta\">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testRequestMapping</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<p>1、对于处理指定请求方式的控制器方法，SpringMVC 中提供了 @RequestMapping 的派生注解</p>\n<p>处理 get 请求的映射 --&gt;@GetMapping</p>\n<p>处理 post 请求的映射 --&gt;@PostMapping</p>\n<p>处理 put 请求的映射 --&gt;@PutMapping</p>\n<p>处理 delete 请求的映射 --&gt;@DeleteMapping</p>\n<p>2、常用的请求方式有 get，post，put，delete</p>\n<p>但是目前浏览器只支持 get 和 post，若在 form 表单提交时，为 method 设置了其他请求方式的字符串（put 或 delete），则按照默认的请求方式 get 处理</p>\n<p>若要发送 put 和 delete 请求，则需要通过 spring 提供的过滤器 HiddenHttpMethodFilter，在 RESTful 部分会讲到</p>\n</blockquote>\n<h3 id=\"5-requestmapping注解的params属性了解\"><a class=\"anchor\" href=\"#5-requestmapping注解的params属性了解\">#</a> 5、@RequestMapping 注解的 params 属性（了解）</h3>\n<p>@RequestMapping 注解的 params 属性通过请求的请求参数匹配请求映射</p>\n<p>@RequestMapping 注解的 params 属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>\n<p>&quot;param&quot;：要求请求映射所匹配的请求必须携带 param 请求参数</p>\n<p>&quot;!param&quot;：要求请求映射所匹配的请求必须不能携带 param 请求参数</p>\n<p>&quot;param=value&quot;：要求请求映射所匹配的请求必须携带 param 请求参数且 param=value</p>\n<p>&quot;param!=value&quot;：要求请求映射所匹配的请求必须携带 param 请求参数但是 param!=value</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(</span></span><br><span class=\"line\"><span class=\"meta\">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class=\"line\"><span class=\"meta\">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testRequestMapping</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote 123456=\"\">\n<p>注：</p>\n<p>若当前请求满足 @RequestMapping 注解的 value 和 method 属性，但是不满足 params 属性，此时页面回报错 400：Parameter conditions &quot;username, password!=123456&quot; not met for actual request parameters: username={admin}, password=</p>\n</blockquote>\n<h3 id=\"6-requestmapping注解的headers属性了解\"><a class=\"anchor\" href=\"#6-requestmapping注解的headers属性了解\">#</a> 6、@RequestMapping 注解的 headers 属性（了解）</h3>\n<p>@RequestMapping 注解的 headers 属性通过请求的请求头信息匹配请求映射</p>\n<p>@RequestMapping 注解的 headers 属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>\n<p>&quot;header&quot;：要求请求映射所匹配的请求必须携带 header 请求头信息</p>\n<p>&quot;!header&quot;：要求请求映射所匹配的请求必须不能携带 header 请求头信息</p>\n<p>&quot;header=value&quot;：要求请求映射所匹配的请求必须携带 header 请求头信息且 header=value</p>\n<p>&quot;header!=value&quot;：要求请求映射所匹配的请求必须携带 header 请求头信息且 header!=value</p>\n<p>若当前请求满足 @RequestMapping 注解的 value 和 method 属性，但是不满足 headers 属性，此时页面显示 404 错误，即资源未找到</p>\n<h3 id=\"7-springmvc支持ant风格的路径\"><a class=\"anchor\" href=\"#7-springmvc支持ant风格的路径\">#</a> 7、SpringMVC 支持 ant 风格的路径</h3>\n<p>？：表示任意的单个字符</p>\n<p>*：表示任意的 0 个或多个字符</p>\n<p>**：表示任意的一层或多层目录</p>\n<p>注意：在使用 ** 时，只能使用 /**/xxx 的方式</p>\n<h3 id=\"8-springmvc支持路径中的占位符重点\"><a class=\"anchor\" href=\"#8-springmvc支持路径中的占位符重点\">#</a> 8、SpringMVC 支持路径中的占位符（重点）</h3>\n<p>原始方式：/deleteUser?id=1</p>\n<p>rest 方式：/deleteUser/1</p>\n<p>SpringMVC 路径中的占位符常用于 RESTful 风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的 @RequestMapping 注解的 value 属性中通过占位符 {xxx} 表示传输的数据，在通过 @PathVariable 注解，将占位符所表示的数据赋值给控制器方法的形参</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testRest</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String id, <span class=\"meta\">@PathVariable(&quot;username&quot;)</span> String username)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;id:&quot;</span>+id+<span class=\"string\">&quot;,username:&quot;</span>+username);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"四-springmvc获取请求参数\"><a class=\"anchor\" href=\"#四-springmvc获取请求参数\">#</a> 四、SpringMVC 获取请求参数</h1>\n<h3 id=\"1-通过servletapi获取\"><a class=\"anchor\" href=\"#1-通过servletapi获取\">#</a> 1、通过 ServletAPI 获取</h3>\n<p>将 HttpServletRequest 作为控制器方法的形参，此时 HttpServletRequest 类型的参数表示封装了当前请求的请求报文的对象</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testParam</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">    String username = request.getParameter(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">    String password = request.getParameter(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username+<span class=\"string\">&quot;,password:&quot;</span>+password);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-通过控制器方法的形参获取请求参数\"><a class=\"anchor\" href=\"#2-通过控制器方法的形参获取请求参数\">#</a> 2、通过控制器方法的形参获取请求参数</h3>\n<p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet 中就会将请求参数赋值给相应的形参</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testParam</span><span class=\"params\">(String username, String password)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username+<span class=\"string\">&quot;,password:&quot;</span>+password);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p>\n<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>\n<p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>\n</blockquote>\n<h3 id=\"3-requestparam\"><a class=\"anchor\" href=\"#3-requestparam\">#</a> 3、@RequestParam</h3>\n<p>@RequestParam 是将请求参数和控制器方法的形参创建映射关系</p>\n<p>@RequestParam 注解一共有三个属性：</p>\n<p>value：指定为形参赋值的请求参数的参数名</p>\n<p>required：设置是否必须传输此请求参数，默认值为 true</p>\n<p>若设置为 true 时，则当前请求必须传输 value 所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue 属性，则页面报错 400：Required String parameter 'xxx' is not present；若设置为 false，则当前请求不是必须传输 value 所指定的请求参数，若没有传输，则注解所标识的形参的值为 null</p>\n<p>defaultValue：不管 required 属性值为 true 或 false，当 value 所指定的请求参数没有传输或传输的值为 &quot;&quot; 时，则使用默认值为形参赋值</p>\n<h3 id=\"4-requestheader\"><a class=\"anchor\" href=\"#4-requestheader\">#</a> 4、@RequestHeader</h3>\n<p>@RequestHeader 是将请求头信息和控制器方法的形参创建映射关系</p>\n<p>@RequestHeader 注解一共有三个属性：value、required、defaultValue，用法同 @RequestParam</p>\n<h3 id=\"5-cookievalue\"><a class=\"anchor\" href=\"#5-cookievalue\">#</a> 5、@CookieValue</h3>\n<p>@CookieValue 是将 cookie 数据和控制器方法的形参创建映射关系</p>\n<p>@CookieValue 注解一共有三个属性：value、required、defaultValue，用法同 @RequestParam</p>\n<h3 id=\"6-通过pojo获取请求参数\"><a class=\"anchor\" href=\"#6-通过pojo获取请求参数\">#</a> 6、通过 POJO 获取请求参数</h3>\n<p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/testpojo&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    性别：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;男&quot;</span>&gt;</span>男<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;女&quot;</span>&gt;</span>女<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    年龄：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testPOJO</span><span class=\"params\">(User user)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-解决获取请求参数的乱码问题\"><a class=\"anchor\" href=\"#7-解决获取请求参数的乱码问题\">#</a> 7、解决获取请求参数的乱码问题</h3>\n<p>解决获取请求参数的乱码问题，可以使用 SpringMVC 提供的编码过滤器 CharacterEncodingFilter，但是必须在 web.xml 中进行注册</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceResponseEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<p>SpringMVC 中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>\n</blockquote>\n<h1 id=\"五-域对象共享数据\"><a class=\"anchor\" href=\"#五-域对象共享数据\">#</a> 五、域对象共享数据</h1>\n<h3 id=\"1-使用servletapi向request域对象共享数据\"><a class=\"anchor\" href=\"#1-使用servletapi向request域对象共享数据\">#</a> 1、使用 ServletAPI 向 request 域对象共享数据</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testServletAPI</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;testScope&quot;</span>, <span class=\"string\">&quot;hello,servletAPI&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-使用modelandview向request域对象共享数据\"><a class=\"anchor\" href=\"#2-使用modelandview向request域对象共享数据\">#</a> 2、使用 ModelAndView 向 request 域对象共享数据</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">testModelAndView</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ModelAndView有Model和View的功能</span></span><br><span class=\"line\"><span class=\"comment\">     * Model主要用于向请求域共享数据</span></span><br><span class=\"line\"><span class=\"comment\">     * View主要用于设置视图，实现页面跳转</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ModelAndView mav = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">    <span class=\"comment\">//向请求域共享数据</span></span><br><span class=\"line\">    mav.addObject(<span class=\"string\">&quot;testScope&quot;</span>, <span class=\"string\">&quot;hello,ModelAndView&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置视图，实现页面跳转</span></span><br><span class=\"line\">    mav.setViewName(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-使用model向request域对象共享数据\"><a class=\"anchor\" href=\"#3-使用model向request域对象共享数据\">#</a> 3、使用 Model 向 request 域对象共享数据</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testModel</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;testScope&quot;</span>, <span class=\"string\">&quot;hello,Model&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-使用map向request域对象共享数据\"><a class=\"anchor\" href=\"#4-使用map向request域对象共享数据\">#</a> 4、使用 map 向 request 域对象共享数据</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testMap</span><span class=\"params\">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;testScope&quot;</span>, <span class=\"string\">&quot;hello,Map&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-使用modelmap向request域对象共享数据\"><a class=\"anchor\" href=\"#5-使用modelmap向request域对象共享数据\">#</a> 5、使用 ModelMap 向 request 域对象共享数据</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testModelMap</span><span class=\"params\">(ModelMap modelMap)</span></span>&#123;</span><br><span class=\"line\">    modelMap.addAttribute(<span class=\"string\">&quot;testScope&quot;</span>, <span class=\"string\">&quot;hello,ModelMap&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-model-modelmap-map的关系\"><a class=\"anchor\" href=\"#6-model-modelmap-map的关系\">#</a> 6、Model、ModelMap、Map 的关系</h3>\n<p>Model、ModelMap、Map 类型的参数其实本质上都是 BindingAwareModelMap 类型的</p>\n<p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface <span class=\"type\">Model</span>&#123;&#125;</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelMap</span> <span class=\"keyword\">extends</span> <span class=\"title\">LinkedHashMap&lt;String</span>, <span class=\"title\">Object&gt;</span> </span>&#123;&#125;</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtendedModelMap</span> <span class=\"keyword\">extends</span> <span class=\"title\">ModelMap</span> <span class=\"title\">implements</span> <span class=\"title\">Model</span> </span>&#123;&#125;</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BindingAwareModelMap</span> <span class=\"keyword\">extends</span> <span class=\"title\">ExtendedModelMap</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-向session域共享数据\"><a class=\"anchor\" href=\"#7-向session域共享数据\">#</a> 7、向 session 域共享数据</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testSession</span><span class=\"params\">(HttpSession session)</span></span>&#123;</span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">&quot;testSessionScope&quot;</span>, <span class=\"string\">&quot;hello,session&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-向application域共享数据\"><a class=\"anchor\" href=\"#8-向application域共享数据\">#</a> 8、向 application 域共享数据</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testApplication</span><span class=\"params\">(HttpSession session)</span></span>&#123;</span><br><span class=\"line\">\tServletContext application = session.getServletContext();</span><br><span class=\"line\">    application.setAttribute(<span class=\"string\">&quot;testApplicationScope&quot;</span>, <span class=\"string\">&quot;hello,application&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"六-springmvc的视图\"><a class=\"anchor\" href=\"#六-springmvc的视图\">#</a> 六、SpringMVC 的视图</h1>\n<p>SpringMVC 中的视图是 View 接口，视图的作用渲染数据，将模型 Model 中的数据展示给用户</p>\n<p>SpringMVC 视图的种类很多，默认有转发视图和重定向视图</p>\n<p>当工程引入 jstl 的依赖，转发视图会自动转换为 JstlView</p>\n<p>若使用的视图技术为 Thymeleaf，在 SpringMVC 的配置文件中配置了 Thymeleaf 的视图解析器，由此视图解析器解析之后所得到的是 ThymeleafView</p>\n<h3 id=\"1-thymeleafview\"><a class=\"anchor\" href=\"#1-thymeleafview\">#</a> 1、ThymeleafView</h3>\n<p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被 SpringMVC 配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"img/img002.png\" alt=\"\" /></p>\n<h3 id=\"2-转发视图\"><a class=\"anchor\" href=\"#2-转发视图\">#</a> 2、转发视图</h3>\n<p>SpringMVC 中默认的转发视图是 InternalResourceView</p>\n<p>SpringMVC 中创建转发视图的情况：</p>\n<p>当控制器方法中所设置的视图名称以 &quot;forward:&quot; 为前缀时，创建 InternalResourceView 视图，此时的视图名称不会被 SpringMVC 配置文件中所配置的视图解析器解析，而是会将前缀 &quot;forward:&quot; 去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>\n<p>例如 &quot;forward:/&quot;，&quot;forward:/employee&quot;</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testForward</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/testHello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"img/img003.png\" alt=\"image-20210706201316593\" /></p>\n<h3 id=\"3-重定向视图\"><a class=\"anchor\" href=\"#3-重定向视图\">#</a> 3、重定向视图</h3>\n<p>SpringMVC 中默认的重定向视图是 RedirectView</p>\n<p>当控制器方法中所设置的视图名称以 &quot;redirect:&quot; 为前缀时，创建 RedirectView 视图，此时的视图名称不会被 SpringMVC 配置文件中所配置的视图解析器解析，而是会将前缀 &quot;redirect:&quot; 去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>\n<p>例如 &quot;redirect:/&quot;，&quot;redirect:/employee&quot;</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testRedirect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/testHello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"img/img004.png\" alt=\"image-20210706201602267\" /></p>\n<blockquote>\n<p>注：</p>\n<p>重定向视图在解析时，会先将 redirect: 前缀去掉，然后会判断剩余部分是否以 / 开头，若是则会自动拼接上下文路径</p>\n</blockquote>\n<h3 id=\"4-视图控制器view-controller\"><a class=\"anchor\" href=\"#4-视图控制器view-controller\">#</a> 4、视图控制器 view-controller</h3>\n<p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用 view-controller 标签进行表示</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\tpath：设置处理的请求地址</span></span><br><span class=\"line\"><span class=\"comment\">\tview-name：设置请求地址所对应的视图名称</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:view-controller</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/testView&quot;</span> <span class=\"attr\">view-name</span>=<span class=\"string\">&quot;success&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<p>当 SpringMVC 中设置任何一个 view-controller 时，其他控制器中的请求映射将全部失效，此时需要在 SpringMVC 的核心配置文件中设置开启 mvc 注解驱动的标签：</p>\n<p>&lt;mvc:annotation-driven /&gt;</p>\n</blockquote>\n<h1 id=\"七-restful\"><a class=\"anchor\" href=\"#七-restful\">#</a> 七、RESTful</h1>\n<h3 id=\"1-restful简介\"><a class=\"anchor\" href=\"#1-restful简介\">#</a> 1、RESTful 简介</h3>\n<p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p>\n<h5 id=\"a资源\"><a class=\"anchor\" href=\"#a资源\">#</a> a &gt; 资源</h5>\n<p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个 URI 来标识。URI 既是资源的名称，也是资源在 Web 上的地址。对某个资源感兴趣的客户端应用，可以通过资源的 URI 与其进行交互。</p>\n<h5 id=\"b资源的表述\"><a class=\"anchor\" href=\"#b资源的表述\">#</a> b &gt; 资源的表述</h5>\n<p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端 - 服务器端之间转移（交换）。资源的表述可以有多种格式，例如 HTML/XML/JSON/ 纯文本 / 图片 / 视频 / 音频等等。资源的表述格式可以通过协商机制来确定。请求 - 响应方向的表述通常使用不同的格式。</p>\n<h5 id=\"c状态转移\"><a class=\"anchor\" href=\"#c状态转移\">#</a> c &gt; 状态转移</h5>\n<p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>\n<h3 id=\"2-restful的实现\"><a class=\"anchor\" href=\"#2-restful的实现\">#</a> 2、RESTful 的实现</h3>\n<p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>\n<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p>\n<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>传统方式</th>\n<th>REST 风格</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查询操作</td>\n<td>getUserById?id=1</td>\n<td>user/1--&gt;get 请求方式</td>\n</tr>\n<tr>\n<td>保存操作</td>\n<td>saveUser</td>\n<td>user--&gt;post 请求方式</td>\n</tr>\n<tr>\n<td>删除操作</td>\n<td>deleteUser?id=1</td>\n<td>user/1--&gt;delete 请求方式</td>\n</tr>\n<tr>\n<td>更新操作</td>\n<td>updateUser</td>\n<td>user--&gt;put 请求方式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-hiddenhttpmethodfilter\"><a class=\"anchor\" href=\"#3-hiddenhttpmethodfilter\">#</a> 3、HiddenHttpMethodFilter</h3>\n<p>由于浏览器只支持发送 get 和 post 方式的请求，那么该如何发送 put 和 delete 请求呢？</p>\n<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>\n<p><strong>HiddenHttpMethodFilter</strong> 处理 put 和 delete 请求的条件：</p>\n<p>a &gt; 当前请求的请求方式必须为 post</p>\n<p>b &gt; 当前请求必须传输请求参数_method</p>\n<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method 的值，因此请求参数_method 的值才是最终的请求方式</p>\n<p>在 web.xml 中注册<strong> HiddenHttpMethodFilter</strong></p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：</p>\n<p>目前为止，SpringMVC 中提供了两个过滤器：CharacterEncodingFilter 和 HiddenHttpMethodFilter</p>\n<p>在 web.xml 中注册时，必须先注册 CharacterEncodingFilter，再注册 HiddenHttpMethodFilter</p>\n<p>原因：</p>\n<ul>\n<li>\n<p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding (encoding) 方法设置字符集的</p>\n</li>\n<li>\n<p>request.setCharacterEncoding (encoding) 方法要求前面不能有任何获取请求参数的操作</p>\n</li>\n<li>\n<p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p>\n</li>\n<li>\n<pre><code>String paramValue = request.getParameter(this.methodParam);\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ul>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"八-restful案例\"><a class=\"anchor\" href=\"#八-restful案例\">#</a> 八、RESTful 案例</h1>\n<h3 id=\"1-准备工作\"><a class=\"anchor\" href=\"#1-准备工作\">#</a> 1、准备工作</h3>\n<p>和传统 CRUD 一样，实现对员工信息的增删改查。</p>\n<ul>\n<li>\n<p>搭建环境</p>\n</li>\n<li>\n<p>准备实体类</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.mvc.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">   <span class=\"comment\">//1 male, 0 female</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Integer gender;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLastName</span><span class=\"params\">(String lastName)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> email;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getGender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> gender;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGender</span><span class=\"params\">(Integer gender)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.gender = gender;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(Integer id, String lastName, String email, Integer gender)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.gender = gender;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>准备 dao 模拟数据</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.mvc.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;Integer, Employee&gt; employees = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">      employees = <span class=\"keyword\">new</span> HashMap&lt;Integer, Employee&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">      employees.put(<span class=\"number\">1001</span>, <span class=\"keyword\">new</span> Employee(<span class=\"number\">1001</span>, <span class=\"string\">&quot;E-AA&quot;</span>, <span class=\"string\">&quot;aa@163.com&quot;</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">      employees.put(<span class=\"number\">1002</span>, <span class=\"keyword\">new</span> Employee(<span class=\"number\">1002</span>, <span class=\"string\">&quot;E-BB&quot;</span>, <span class=\"string\">&quot;bb@163.com&quot;</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">      employees.put(<span class=\"number\">1003</span>, <span class=\"keyword\">new</span> Employee(<span class=\"number\">1003</span>, <span class=\"string\">&quot;E-CC&quot;</span>, <span class=\"string\">&quot;cc@163.com&quot;</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">      employees.put(<span class=\"number\">1004</span>, <span class=\"keyword\">new</span> Employee(<span class=\"number\">1004</span>, <span class=\"string\">&quot;E-DD&quot;</span>, <span class=\"string\">&quot;dd@163.com&quot;</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">      employees.put(<span class=\"number\">1005</span>, <span class=\"keyword\">new</span> Employee(<span class=\"number\">1005</span>, <span class=\"string\">&quot;E-EE&quot;</span>, <span class=\"string\">&quot;ee@163.com&quot;</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer initId = <span class=\"number\">1006</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(employee.getId() == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         employee.setId(initId++);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      employees.put(employee.getId(), employee);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;Employee&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> employees.values();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">get</span><span class=\"params\">(Integer id)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> employees.get(id);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Integer id)</span></span>&#123;</span><br><span class=\"line\">      employees.remove(id);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"2-功能清单\"><a class=\"anchor\" href=\"#2-功能清单\">#</a> 2、功能清单</h3>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL 地址</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>访问首页√</td>\n<td>/</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>查询全部数据√</td>\n<td>/employee</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>删除√</td>\n<td>/employee/2</td>\n<td>DELETE</td>\n</tr>\n<tr>\n<td>跳转到添加数据页面√</td>\n<td>/toAdd</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>执行保存√</td>\n<td>/employee</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>跳转到更新数据页面√</td>\n<td>/employee/2</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>执行更新√</td>\n<td>/employee</td>\n<td>PUT</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-具体功能访问首页\"><a class=\"anchor\" href=\"#3-具体功能访问首页\">#</a> 3、具体功能：访问首页</h3>\n<h5 id=\"a配置view-controller\"><a class=\"anchor\" href=\"#a配置view-controller\">#</a> a &gt; 配置 view-controller</h5>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:view-controller</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/&quot;</span> <span class=\"attr\">view-name</span>=<span class=\"string\">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"b创建页面\"><a class=\"anchor\" href=\"#b创建页面\">#</a> b &gt; 创建页面</h5>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-具体功能查询所有员工数据\"><a class=\"anchor\" href=\"#4-具体功能查询所有员工数据\">#</a> 4、具体功能：查询所有员工数据</h3>\n<h5 id=\"a控制器方法\"><a class=\"anchor\" href=\"#a控制器方法\">#</a> a &gt; 控制器方法</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmployeeList</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;employeeList&quot;</span>, employeeList);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;employee_list&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"b创建employee_listhtml\"><a class=\"anchor\" href=\"#b创建employee_listhtml\">#</a> b &gt; 创建 employee_list.html</h5>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Employee Info<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align: center;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataTable&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;5&quot;</span>&gt;</span>Employee Info<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>lastName<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>gender<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>options(<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>)<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;deleteA&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;deleteEmployee&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-具体功能删除\"><a class=\"anchor\" href=\"#5-具体功能删除\">#</a> 5、具体功能：删除</h3>\n<h5 id=\"a创建处理delete请求方式的表单\"><a class=\"anchor\" href=\"#a创建处理delete请求方式的表单\">#</a> a &gt; 创建处理 delete 请求方式的表单</h5>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;delete_form&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;delete&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"b删除超链接绑定点击事件\"><a class=\"anchor\" href=\"#b删除超链接绑定点击事件\">#</a> b &gt; 删除超链接绑定点击事件</h5>\n<p>引入 vue.js</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>删除超链接</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;deleteA&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;deleteEmployee&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>通过 vue 处理点击事件</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vue = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&quot;#dataTable&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//event表示当前事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">deleteEmployee</span>:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//通过id获取表单标签</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> delete_form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;delete_form&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class=\"line\"><span class=\"javascript\">                delete_form.action = event.target.href;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//提交表单</span></span></span><br><span class=\"line\"><span class=\"javascript\">                delete_form.submit();</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//阻止超链接的默认跳转行为</span></span></span><br><span class=\"line\"><span class=\"javascript\">                event.preventDefault();</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"c控制器方法\"><a class=\"anchor\" href=\"#c控制器方法\">#</a> c &gt; 控制器方法</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteEmployee</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">    employeeDao.delete(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/employee&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-具体功能跳转到添加数据页面\"><a class=\"anchor\" href=\"#6-具体功能跳转到添加数据页面\">#</a> 6、具体功能：跳转到添加数据页面</h3>\n<h5 id=\"a配置view-controller-2\"><a class=\"anchor\" href=\"#a配置view-controller-2\">#</a> a &gt; 配置 view-controller</h5>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:view-controller</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/toAdd&quot;</span> <span class=\"attr\">view-name</span>=<span class=\"string\">&quot;employee_add&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"b创建employee_addhtml\"><a class=\"anchor\" href=\"#b创建employee_addhtml\">#</a> b &gt; 创建 employee_add.html</h5>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Add Employee<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/employee&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    lastName:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    email:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    gender:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>male</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span>female<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-具体功能执行保存\"><a class=\"anchor\" href=\"#7-具体功能执行保存\">#</a> 7、具体功能：执行保存</h3>\n<h5 id=\"a控制器方法-2\"><a class=\"anchor\" href=\"#a控制器方法-2\">#</a> a &gt; 控制器方法</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addEmployee</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\">    employeeDao.save(employee);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/employee&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-具体功能跳转到更新数据页面\"><a class=\"anchor\" href=\"#8-具体功能跳转到更新数据页面\">#</a> 8、具体功能：跳转到更新数据页面</h3>\n<h5 id=\"a修改超链接\"><a class=\"anchor\" href=\"#a修改超链接\">#</a> a &gt; 修改超链接</h5>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"b控制器方法\"><a class=\"anchor\" href=\"#b控制器方法\">#</a> b &gt; 控制器方法</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmployeeById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span></span>&#123;</span><br><span class=\"line\">    Employee employee = employeeDao.get(id);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;employee&quot;</span>, employee);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;employee_update&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"c创建employee_updatehtml\"><a class=\"anchor\" href=\"#c创建employee_updatehtml\">#</a> c &gt; 创建 employee_update.html</h5>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Update Employee<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/employee&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;put&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    lastName:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    email:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class=\"line\"><span class=\"comment\">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    gender:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">th:field</span>=<span class=\"string\">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">th:field</span>=<span class=\"string\">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;update&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-具体功能执行更新\"><a class=\"anchor\" href=\"#9-具体功能执行更新\">#</a> 9、具体功能：执行更新</h3>\n<h5 id=\"a控制器方法-3\"><a class=\"anchor\" href=\"#a控制器方法-3\">#</a> a &gt; 控制器方法</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateEmployee</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\">    employeeDao.save(employee);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/employee&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"八-httpmessageconverter\"><a class=\"anchor\" href=\"#八-httpmessageconverter\">#</a> 八、HttpMessageConverter</h1>\n<p>HttpMessageConverter，报文信息转换器，将请求报文转换为 Java 对象，或将 Java 对象转换为响应报文</p>\n<p>HttpMessageConverter 提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p>\n<p>ResponseEntity</p>\n<h3 id=\"1-requestbody\"><a class=\"anchor\" href=\"#1-requestbody\">#</a> 1、@RequestBody</h3>\n<p>@RequestBody 可以获取请求体，需要在控制器方法设置一个形参，使用 @RequestBody 进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testRequestBody</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String requestBody)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：</p>\n<p>requestBody:username=admin&amp;password=123456</p>\n<h3 id=\"2-requestentity\"><a class=\"anchor\" href=\"#2-requestentity\">#</a> 2、RequestEntity</h3>\n<p>RequestEntity 封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过 getHeaders () 获取请求头信息，通过 getBody () 获取请求体信息</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testRequestEntity</span><span class=\"params\">(RequestEntity&lt;String&gt; requestEntity)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：<br />\nrequestHeader:[host:&quot;localhost:8080&quot;, connection:&quot;keep-alive&quot;, content-length:&quot;27&quot;, cache-control:&quot;max-age=0&quot;, sec-ch-ua:&quot;&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;90&quot;, &quot;Google Chrome&quot;;v=&quot;90&quot;&quot;, sec-ch-ua-mobile:&quot;?0&quot;, upgrade-insecure-requests:&quot;1&quot;, origin:&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\">http://localhost:8080</span>&quot;, user-agent:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36&quot;]<br />\nrequestBody:username=admin&amp;password=123</p>\n<h3 id=\"3-responsebody\"><a class=\"anchor\" href=\"#3-responsebody\">#</a> 3、@ResponseBody</h3>\n<p>@ResponseBody 用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testResponseBody</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果：浏览器页面显示 success</p>\n<h3 id=\"4-springmvc处理json\"><a class=\"anchor\" href=\"#4-springmvc处理json\">#</a> 4、SpringMVC 处理 json</h3>\n<p>@ResponseBody 处理 json 的步骤：</p>\n<p>a &gt; 导入 jackson 的依赖</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.12.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>b &gt; 在 SpringMVC 的核心配置文件中开启 mvc 的注解驱动，此时在 HandlerAdaptor 中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的 Java 对象转换为 Json 格式的字符串</p>\n<p><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"symbol\">mvc:</span><span class=\"keyword\">annotation</span>-<span class=\"title\">driven</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>c &gt; 在处理器方法上使用 @ResponseBody 注解进行标识</p>\n<p>d &gt; 将 Java 对象直接作为控制器方法的返回值返回，就会自动转换为 Json 格式的字符串</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">testResponseUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"number\">1001</span>,<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>,<span class=\"number\">23</span>,<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>浏览器的页面中展示的结果：</p>\n<p id:1001,username:admin,password:123456,age:23,sex:男=\"\"></p>\n<h3 id=\"5-springmvc处理ajax\"><a class=\"anchor\" href=\"#5-springmvc处理ajax\">#</a> 5、SpringMVC 处理 ajax</h3>\n<p>a &gt; 请求超链接：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>b &gt; 通过 vue 和 axios 处理点击事件：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vue = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">testAjax</span>:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                axios(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"attr\">url</span>:event.target.href,</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"attr\">params</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                        <span class=\"attr\">username</span>:<span class=\"string\">&quot;admin&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                        <span class=\"attr\">password</span>:<span class=\"string\">&quot;123456&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    alert(response.data);</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">                event.preventDefault();</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>c &gt; 控制器方法：</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testAjax</span><span class=\"params\">(String username, String password)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username+<span class=\"string\">&quot;,password:&quot;</span>+password);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello,ajax&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-restcontroller注解\"><a class=\"anchor\" href=\"#6-restcontroller注解\">#</a> 6、@RestController 注解</h3>\n<p>@RestController 注解是 springMVC 提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 @Controller 注解，并且为其中的每个方法添加了 @ResponseBody 注解</p>\n<h3 id=\"7-responseentity\"><a class=\"anchor\" href=\"#7-responseentity\">#</a> 7、ResponseEntity</h3>\n<p>ResponseEntity 用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>\n<h1 id=\"九-文件上传和下载\"><a class=\"anchor\" href=\"#九-文件上传和下载\">#</a> 九、文件上传和下载</h1>\n<h3 id=\"1-文件下载\"><a class=\"anchor\" href=\"#1-文件下载\">#</a> 1、文件下载</h3>\n<p>使用 ResponseEntity 实现下载文件的功能</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取ServletContext对象</span></span><br><span class=\"line\">    ServletContext servletContext = session.getServletContext();</span><br><span class=\"line\">    <span class=\"comment\">//获取服务器中文件的真实路径</span></span><br><span class=\"line\">    String realPath = servletContext.getRealPath(<span class=\"string\">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建输入流</span></span><br><span class=\"line\">    InputStream is = <span class=\"keyword\">new</span> FileInputStream(realPath);</span><br><span class=\"line\">    <span class=\"comment\">//创建字节数组</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[is.available()];</span><br><span class=\"line\">    <span class=\"comment\">//将流读到字节数组中</span></span><br><span class=\"line\">    is.read(bytes);</span><br><span class=\"line\">    <span class=\"comment\">//创建HttpHeaders对象设置响应头信息</span></span><br><span class=\"line\">    MultiValueMap&lt;String, String&gt; headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">    <span class=\"comment\">//设置要下载方式以及下载文件的名字</span></span><br><span class=\"line\">    headers.add(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置响应状态码</span></span><br><span class=\"line\">    HttpStatus statusCode = HttpStatus.OK;</span><br><span class=\"line\">    <span class=\"comment\">//创建ResponseEntity对象</span></span><br><span class=\"line\">    ResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt; responseEntity = <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(bytes, headers, statusCode);</span><br><span class=\"line\">    <span class=\"comment\">//关闭输入流</span></span><br><span class=\"line\">    is.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> responseEntity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-文件上传\"><a class=\"anchor\" href=\"#2-文件上传\">#</a> 2、文件上传</h3>\n<p>文件上传要求 form 表单的请求方式必须为 post，并且添加属性 enctype=&quot;multipart/form-data&quot;</p>\n<p>SpringMVC 中将上传的文件封装到 MultipartFile 对象中，通过此对象可以获取文件相关信息</p>\n<p>上传步骤：</p>\n<p>a &gt; 添加依赖：</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>b &gt; 在 SpringMVC 的配置文件中添加配置：</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;multipartResolver&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>c &gt; 控制器方法：</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testUp</span><span class=\"params\">(MultipartFile photo, HttpSession session)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取上传的文件的文件名</span></span><br><span class=\"line\">    String fileName = photo.getOriginalFilename();</span><br><span class=\"line\">    <span class=\"comment\">//处理文件重名问题</span></span><br><span class=\"line\">    String hzName = fileName.substring(fileName.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class=\"line\">    <span class=\"comment\">//获取服务器中photo目录的路径</span></span><br><span class=\"line\">    ServletContext servletContext = session.getServletContext();</span><br><span class=\"line\">    String photoPath = servletContext.getRealPath(<span class=\"string\">&quot;photo&quot;</span>);</span><br><span class=\"line\">    File file = <span class=\"keyword\">new</span> File(photoPath);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!file.exists())&#123;</span><br><span class=\"line\">        file.mkdir();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String finalPath = photoPath + File.separator + fileName;</span><br><span class=\"line\">    <span class=\"comment\">//实现上传功能</span></span><br><span class=\"line\">    photo.transferTo(<span class=\"keyword\">new</span> File(finalPath));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"十-拦截器\"><a class=\"anchor\" href=\"#十-拦截器\">#</a> 十、拦截器</h1>\n<h3 id=\"1-拦截器的配置\"><a class=\"anchor\" href=\"#1-拦截器的配置\">#</a> 1、拦截器的配置</h3>\n<p>SpringMVC 中的拦截器用于拦截控制器方法的执行</p>\n<p>SpringMVC 中的拦截器需要实现 HandlerInterceptor</p>\n<p>SpringMVC 的拦截器必须在 SpringMVC 的配置文件中进行配置：</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;firstInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/**&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:exclude-mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;firstInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-拦截器的三个抽象方法\"><a class=\"anchor\" href=\"#2-拦截器的三个抽象方法\">#</a> 2、拦截器的三个抽象方法</h3>\n<p>SpringMVC 中的拦截器有三个抽象方法：</p>\n<p>preHandle：控制器方法执行之前执行 preHandle ()，其 boolean 类型的返回值表示是否拦截或放行，返回 true 为放行，即调用控制器方法；返回 false 表示拦截，即不调用控制器方法</p>\n<p>postHandle：控制器方法执行之后执行 postHandle ()</p>\n<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行 afterComplation ()</p>\n<h3 id=\"3-多个拦截器的执行顺序\"><a class=\"anchor\" href=\"#3-多个拦截器的执行顺序\">#</a> 3、多个拦截器的执行顺序</h3>\n<p>a &gt; 若每个拦截器的 preHandle () 都返回 true</p>\n<p>此时多个拦截器的执行顺序和拦截器在 SpringMVC 的配置文件的配置顺序有关：</p>\n<p>preHandle () 会按照配置的顺序执行，而 postHandle () 和 afterComplation () 会按照配置的反序执行</p>\n<p>b &gt; 若某个拦截器的 preHandle () 返回了 false</p>\n<p>preHandle () 返回 false 和它之前的拦截器的 preHandle () 都会执行，postHandle () 都不执行，返回 false 的拦截器之前的拦截器的 afterComplation () 会执行</p>\n<h1 id=\"十一-异常处理器\"><a class=\"anchor\" href=\"#十一-异常处理器\">#</a> 十一、异常处理器</h1>\n<h3 id=\"1-基于配置的异常处理\"><a class=\"anchor\" href=\"#1-基于配置的异常处理\">#</a> 1、基于配置的异常处理</h3>\n<p>SpringMVC 提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p>\n<p>HandlerExceptionResolver 接口的实现类有：DefaultHandlerExceptionResolver 和 SimpleMappingExceptionResolver</p>\n<p>SpringMVC 提供了自定义的异常处理器 SimpleMappingExceptionResolver，使用方式：</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        \t\tproperties的键表示处理器方法执行过程中出现的异常</span></span><br><span class=\"line\"><span class=\"comment\">        \t\tproperties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class=\"line\"><span class=\"comment\">        \t--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    \texceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;exceptionAttribute&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;ex&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-基于注解的异常处理\"><a class=\"anchor\" href=\"#2-基于注解的异常处理\">#</a> 2、基于注解的异常处理</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class=\"line\">    <span class=\"comment\">//ex表示当前请求处理中出现的异常对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handleArithmeticException</span><span class=\"params\">(Exception ex, Model model)</span></span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;ex&quot;</span>, ex);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;error&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"十二-注解配置springmvc\"><a class=\"anchor\" href=\"#十二-注解配置springmvc\">#</a> 十二、注解配置 SpringMVC</h1>\n<p>使用配置类和注解代替 web.xml 和 SpringMVC 配置文件的功能</p>\n<h3 id=\"1-创建初始化类代替webxml\"><a class=\"anchor\" href=\"#1-创建初始化类代替webxml\">#</a> 1、创建初始化类，代替 web.xml</h3>\n<p>在 Servlet3.0 环境中，容器会在类路径中查找实现 javax.servlet.ServletContainerInitializer 接口的类，如果找到的话就用它来配置 Servlet 容器。<br />\nSpring 提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现 WebApplicationInitializer 的类并将配置的任务交给它们来完成。Spring3.2 引入了一个便利的 WebApplicationInitializer 基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer 并将其部署到 Servlet3.0 容器的时候，容器会自动发现它，并用它来配置 Servlet 上下文。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebInit</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定spring的配置类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Class[]&#123;SpringConfig.class&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定SpringMVC的配置类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Class[]&#123;WebConfig.class&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String[] getServletMappings() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;/&quot;</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加过滤器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Filter[] getServletFilters() &#123;</span><br><span class=\"line\">        CharacterEncodingFilter encodingFilter = <span class=\"keyword\">new</span> CharacterEncodingFilter();</span><br><span class=\"line\">        encodingFilter.setEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        encodingFilter.setForceRequestEncoding(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        HiddenHttpMethodFilter hiddenHttpMethodFilter = <span class=\"keyword\">new</span> HiddenHttpMethodFilter();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Filter[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-创建springconfig配置类代替spring的配置文件\"><a class=\"anchor\" href=\"#2-创建springconfig配置类代替spring的配置文件\">#</a> 2、创建 SpringConfig 配置类，代替 spring 的配置文件</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-创建webconfig配置类代替springmvc的配置文件\"><a class=\"anchor\" href=\"#3-创建webconfig配置类代替springmvc的配置文件\">#</a> 3、创建 WebConfig 配置类，代替 SpringMVC 的配置文件</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">//扫描组件</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//开启MVC注解驱动</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用默认的servlet处理静态资源</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureDefaultServletHandling</span><span class=\"params\">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class=\"line\">        configurer.enable();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置文件上传解析器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CommonsMultipartResolver <span class=\"title\">multipartResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonsMultipartResolver();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置拦截器</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        FirstInterceptor firstInterceptor = <span class=\"keyword\">new</span> FirstInterceptor();</span><br><span class=\"line\">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//配置视图控制</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*@Override</span></span><br><span class=\"line\"><span class=\"comment\">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//配置异常映射</span></span><br><span class=\"line\">    <span class=\"comment\">/*@Override</span></span><br><span class=\"line\"><span class=\"comment\">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class=\"line\"><span class=\"comment\">        Properties prop = new Properties();</span></span><br><span class=\"line\"><span class=\"comment\">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        //设置异常映射</span></span><br><span class=\"line\"><span class=\"comment\">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class=\"line\"><span class=\"comment\">        //设置共享异常信息的键</span></span><br><span class=\"line\"><span class=\"comment\">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        resolvers.add(exceptionResolver);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置生成模板解析器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ITemplateResolver <span class=\"title\">templateResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();</span><br><span class=\"line\">        <span class=\"comment\">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class=\"line\">        ServletContextTemplateResolver templateResolver = <span class=\"keyword\">new</span> ServletContextTemplateResolver(</span><br><span class=\"line\">                webApplicationContext.getServletContext());</span><br><span class=\"line\">        templateResolver.setPrefix(<span class=\"string\">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class=\"line\">        templateResolver.setSuffix(<span class=\"string\">&quot;.html&quot;</span>);</span><br><span class=\"line\">        templateResolver.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> templateResolver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SpringTemplateEngine <span class=\"title\">templateEngine</span><span class=\"params\">(ITemplateResolver templateResolver)</span> </span>&#123;</span><br><span class=\"line\">        SpringTemplateEngine templateEngine = <span class=\"keyword\">new</span> SpringTemplateEngine();</span><br><span class=\"line\">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> templateEngine;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewResolver <span class=\"title\">viewResolver</span><span class=\"params\">(SpringTemplateEngine templateEngine)</span> </span>&#123;</span><br><span class=\"line\">        ThymeleafViewResolver viewResolver = <span class=\"keyword\">new</span> ThymeleafViewResolver();</span><br><span class=\"line\">        viewResolver.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> viewResolver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-测试功能\"><a class=\"anchor\" href=\"#4-测试功能\">#</a> 4、测试功能</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;index&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"十三-springmvc执行流程\"><a class=\"anchor\" href=\"#十三-springmvc执行流程\">#</a> 十三、SpringMVC 执行流程</h1>\n<h3 id=\"1-springmvc常用组件\"><a class=\"anchor\" href=\"#1-springmvc常用组件\">#</a> 1、SpringMVC 常用组件</h3>\n<ul>\n<li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li>\n</ul>\n<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>\n<ul>\n<li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li>\n</ul>\n<p>作用：根据请求的 url、method 等信息查找 Handler，即控制器方法</p>\n<ul>\n<li>Handler：<strong>处理器</strong>，需要工程师开发</li>\n</ul>\n<p>作用：在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理</p>\n<ul>\n<li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li>\n</ul>\n<p>作用：通过 HandlerAdapter 对处理器（控制器方法）进行执行</p>\n<ul>\n<li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li>\n</ul>\n<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>\n<ul>\n<li>View：<strong>视图</strong></li>\n</ul>\n<p>作用：将模型数据通过页面展示给用户</p>\n<h3 id=\"2-dispatcherservlet初始化过程\"><a class=\"anchor\" href=\"#2-dispatcherservlet初始化过程\">#</a> 2、DispatcherServlet 初始化过程</h3>\n<p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>\n<p><img data-src=\"img/img005.png\" alt=\"images\" /></p>\n<h5 id=\"a初始化webapplicationcontext\"><a class=\"anchor\" href=\"#a初始化webapplicationcontext\">#</a> a &gt; 初始化 WebApplicationContext</h5>\n<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> WebApplicationContext <span class=\"title\">initWebApplicationContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    WebApplicationContext rootContext =</span><br><span class=\"line\">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class=\"line\">    WebApplicationContext wac = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.webApplicationContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A context instance was injected at construction time -&gt; use it</span></span><br><span class=\"line\">        wac = <span class=\"keyword\">this</span>.webApplicationContext;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wac <span class=\"keyword\">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class=\"line\">            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!cwac.isActive()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class=\"line\">                <span class=\"comment\">// setting the parent context, setting the application context id, etc</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cwac.getParent() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class=\"line\">                    <span class=\"comment\">// the root application context (if any; may be null) as the parent</span></span><br><span class=\"line\">                    cwac.setParent(rootContext);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wac == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class=\"line\">        <span class=\"comment\">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class=\"line\">        <span class=\"comment\">// that the parent context (if any) has already been set and that the</span></span><br><span class=\"line\">        <span class=\"comment\">// user has performed any initialization such as setting the context id</span></span><br><span class=\"line\">        wac = findWebApplicationContext();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wac == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class=\"line\">        <span class=\"comment\">// 创建WebApplicationContext</span></span><br><span class=\"line\">        wac = createWebApplicationContext(rootContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.refreshEventReceived) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class=\"line\">        <span class=\"comment\">// support or the context injected at construction time had already been</span></span><br><span class=\"line\">        <span class=\"comment\">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.onRefreshMonitor) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 刷新WebApplicationContext</span></span><br><span class=\"line\">            onRefresh(wac);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.publishContext) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Publish the context as a servlet context attribute.</span></span><br><span class=\"line\">        <span class=\"comment\">// 将IOC容器在应用域共享</span></span><br><span class=\"line\">        String attrName = getServletContextAttributeName();</span><br><span class=\"line\">        getServletContext().setAttribute(attrName, wac);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wac;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"b创建webapplicationcontext\"><a class=\"anchor\" href=\"#b创建webapplicationcontext\">#</a> b &gt; 创建 WebApplicationContext</h5>\n<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> WebApplicationContext <span class=\"title\">createWebApplicationContext</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ApplicationContext parent)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ApplicationContextException(</span><br><span class=\"line\">            <span class=\"string\">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class=\"line\">            <span class=\"string\">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class=\"line\">            <span class=\"string\">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通过反射创建 IOC 容器对象</span></span><br><span class=\"line\">    ConfigurableWebApplicationContext wac =</span><br><span class=\"line\">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class=\"line\"></span><br><span class=\"line\">    wac.setEnvironment(getEnvironment());</span><br><span class=\"line\">    <span class=\"comment\">// 设置父容器</span></span><br><span class=\"line\">    wac.setParent(parent);</span><br><span class=\"line\">    String configLocation = getContextConfigLocation();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (configLocation != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        wac.setConfigLocation(configLocation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    configureAndRefreshWebApplicationContext(wac);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wac;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"cdispatcherservlet初始化策略\"><a class=\"anchor\" href=\"#cdispatcherservlet初始化策略\">#</a> c&gt;DispatcherServlet 初始化策略</h5>\n<p>FrameworkServlet 创建 WebApplicationContext 后，刷新容器，调用 onRefresh (wac)，此方法在 DispatcherServlet 中进行了重写，调用了 initStrategies (context) 方法，初始化策略，即初始化 DispatcherServlet 的各个组件</p>\n<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initStrategies</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">   initMultipartResolver(context);</span><br><span class=\"line\">   initLocaleResolver(context);</span><br><span class=\"line\">   initThemeResolver(context);</span><br><span class=\"line\">   initHandlerMappings(context);</span><br><span class=\"line\">   initHandlerAdapters(context);</span><br><span class=\"line\">   initHandlerExceptionResolvers(context);</span><br><span class=\"line\">   initRequestToViewNameTranslator(context);</span><br><span class=\"line\">   initViewResolvers(context);</span><br><span class=\"line\">   initFlashMapManager(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-dispatcherservlet调用组件处理请求\"><a class=\"anchor\" href=\"#3-dispatcherservlet调用组件处理请求\">#</a> 3、DispatcherServlet 调用组件处理请求</h3>\n<h5 id=\"aprocessrequest\"><a class=\"anchor\" href=\"#aprocessrequest\">#</a> a&gt;processRequest()</h5>\n<p>FrameworkServlet 重写 HttpServlet 中的 service () 和 doXxx ()，这些方法中调用了 processRequest (request, response)</p>\n<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">    Throwable failureCause = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class=\"line\">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class=\"keyword\">new</span> RequestBindingInterceptor());</span><br><span class=\"line\"></span><br><span class=\"line\">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class=\"line\">        doService(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (ServletException | IOException ex) &#123;</span><br><span class=\"line\">        failureCause = ex;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        failureCause = ex;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">&quot;Request processing failed&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestAttributes != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            requestAttributes.requestCompleted();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logResult(request, response, failureCause, asyncManager);</span><br><span class=\"line\">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"bdoservice\"><a class=\"anchor\" href=\"#bdoservice\">#</a> b&gt;doService()</h5>\n<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doService</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    logRequest(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class=\"line\">    <span class=\"comment\">// to be able to restore the original attributes after the include.</span></span><br><span class=\"line\">    Map&lt;String, Object&gt; attributesSnapshot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class=\"line\">        attributesSnapshot = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class=\"line\">            String attrName = (String) attrNames.nextElement();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class=\"line\">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Make framework objects available to handlers and view objects.</span></span><br><span class=\"line\">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class=\"line\">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.localeResolver);</span><br><span class=\"line\">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.themeResolver);</span><br><span class=\"line\">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flashMapManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        FlashMap inputFlashMap = <span class=\"keyword\">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inputFlashMap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class=\"keyword\">new</span> FlashMap());</span><br><span class=\"line\">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class=\"keyword\">this</span>.flashMapManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    RequestPath requestPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class=\"line\">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理请求和响应</span></span><br><span class=\"line\">        doDispatch(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (attributesSnapshot != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestPath != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"cdodispatch\"><a class=\"anchor\" href=\"#cdodispatch\">#</a> c&gt;doDispatch()</h5>\n<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    HttpServletRequest processedRequest = request;</span><br><span class=\"line\">    HandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Exception dispatchException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            processedRequest = checkMultipart(request);</span><br><span class=\"line\">            multipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            \tmappedHandler：调用链</span></span><br><span class=\"line\"><span class=\"comment\">                包含handler、interceptorList、interceptorIndex</span></span><br><span class=\"line\"><span class=\"comment\">            \thandler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class=\"line\"><span class=\"comment\">            \tinterceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class=\"line\"><span class=\"comment\">            \tinterceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            mappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                noHandlerFound(processedRequest, response);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">           \t<span class=\"comment\">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class=\"line\">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">            String method = request.getMethod();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isGet = <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            <span class=\"comment\">// 调用拦截器的preHandle()</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">            <span class=\"comment\">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class=\"line\">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            applyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">            <span class=\"comment\">// 调用拦截器的postHandle()</span></span><br><span class=\"line\">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            dispatchException = ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">            <span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">            dispatchException = <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 后续处理：处理模型数据和渲染视图</span></span><br><span class=\"line\">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">                               <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">&quot;Handler processing failed&quot;</span>, err));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">                cleanupMultipart(processedRequest);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"dprocessdispatchresult\"><a class=\"anchor\" href=\"#dprocessdispatchresult\">#</a> d&gt;processDispatchResult()</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processDispatchResult</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   <span class=\"meta\">@Nullable</span> HandlerExecutionChain mappedHandler, <span class=\"meta\">@Nullable</span> ModelAndView mv,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   <span class=\"meta\">@Nullable</span> Exception exception)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> errorView = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class=\"line\">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Object handler = (mappedHandler != <span class=\"keyword\">null</span> ? mappedHandler.getHandler() : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            mv = processHandlerException(request, response, handler, exception);</span><br><span class=\"line\">            errorView = (mv != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Did the handler return a view to render?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mv != <span class=\"keyword\">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理模型数据和渲染视图</span></span><br><span class=\"line\">        render(mv, request, response);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errorView) &#123;</span><br><span class=\"line\">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Concurrent handling started during a forward</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Exception (if any) is already handled..</span></span><br><span class=\"line\">        <span class=\"comment\">// 调用拦截器的afterCompletion()</span></span><br><span class=\"line\">        mappedHandler.triggerAfterCompletion(request, response, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-springmvc的执行流程\"><a class=\"anchor\" href=\"#4-springmvc的执行流程\">#</a> 4、SpringMVC 的执行流程</h3>\n<ol>\n<li>\n<p>用户向服务器发送请求，请求被 SpringMVC 前端控制器 DispatcherServlet 捕获。</p>\n</li>\n<li>\n<p>DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI），判断请求 URI 对应的映射：</p>\n</li>\n</ol>\n<p>a) 不存在</p>\n<p>i. 再判断是否配置了 mvc:default-servlet-handler</p>\n<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示 404 错误</p>\n<p><img data-src=\"img/img006.png\" alt=\"image-20210709214911404\" /></p>\n<p><img data-src=\"img/img007.png\" alt=\"image-20210709214947432\" /></p>\n<p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示 404 错误</p>\n<p><img data-src=\"img/img008.png\" alt=\"image-20210709215255693\" /></p>\n<p><img data-src=\"img/img009.png\" alt=\"image-20210709215336097\" /></p>\n<p>b) 存在则执行下面的流程</p>\n<ol start=\"3\">\n<li>\n<p>根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 执行链对象的形式返回。</p>\n</li>\n<li>\n<p>DispatcherServlet 根据获得的 Handler，选择一个合适的 HandlerAdapter。</p>\n</li>\n<li>\n<p>如果成功获得 HandlerAdapter，此时将开始执行拦截器的 preHandler (…) 方法【正向】</p>\n</li>\n<li>\n<p>提取 Request 中的模型数据，填充 Handler 入参，开始执行 Handler（Controller) 方法，处理请求。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：</p>\n</li>\n</ol>\n<p>a) HttpMessageConveter： 将请求消息（如 Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息</p>\n<p>b) 数据转换：对请求消息进行数据转换。如 String 转换成 Integer、Double 等</p>\n<p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p>\n<p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中</p>\n<ol start=\"7\">\n<li>\n<p>Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象。</p>\n</li>\n<li>\n<p>此时将开始执行拦截器的 postHandle (...) 方法【逆向】。</p>\n</li>\n<li>\n<p>根据返回的 ModelAndView（此时会判断是否存在异常：如果存在异常，则执行 HandlerExceptionResolver 进行异常处理）选择一个适合的 ViewResolver 进行视图解析，根据 Model 和 View，来渲染视图。</p>\n</li>\n<li>\n<p>渲染视图完毕执行拦截器的 afterCompletion (…) 方法【逆向】。</p>\n</li>\n<li>\n<p>将渲染结果返回给客户端。</p>\n</li>\n</ol>\n",
            "tags": [
                "学习",
                "Spring"
            ]
        },
        {
            "id": "http://kale-as.github.io/2021/10/17/%E5%9C%A8%E5%A4%9C%E6%99%AF%E7%9A%84%E8%88%AA%E9%81%93/",
            "url": "http://kale-as.github.io/2021/10/17/%E5%9C%A8%E5%A4%9C%E6%99%AF%E7%9A%84%E8%88%AA%E9%81%93/",
            "title": "在夜景的航道",
            "date_published": "2021-10-17T08:15:00.000Z",
            "content_html": "<h1 id=\"在夜景的航道\"><a class=\"anchor\" href=\"#在夜景的航道\">#</a> 在夜景的航道</h1>\n<p>在阳明山泡完温泉下山，立刻进人那在假日永远如肠胃炎的仰德大道，随着车阵逸通前进。</p>\n<p>朋友的孩子建议我们走 &quot;秘密通道&quot;，可能比较不会塞车。</p>\n<p>秘密通道是转出仰德大道，进人一条林间完全无灯的小路。当我们的车子绕着文化大学正要下山的时候，看到台北的万盏华灯亮灿灿的，蔚成一片灯海，宽阔、辉煌、温暖，令人的心里也好像被点灯，亮滋滋的。</p>\n<p>我每天站在家里的十五楼阳台看台北夜景，虽可以感觉夜景之美，却没想到台北的夜景美到这种境界。当场就建议朋友下车，专心的来看夜景。</p>\n<p>站在临山的边缘看夜景，使人有张开双臂欢呼的冲动。我对朋友说，我曾经看过许多以夜景闻名的都市，像纽约、东京、巴黎、伦敦、罗马、香港等，&quot;我们台北现在一点也不逊色呀&quot;！</p>\n<p>觉得台北的夜景美丽，除了真是美以外，也有一点感情与乡土的因素。你看，这是我们一点一滴建立起来的城市呢！带孩子来看夜景也可以无愧了。</p>\n<p>看到那些辉煌的灯火，想到一盏灯里面就有一户人家，就会感觉生命真的如是渺小，因于这种渺小，使我有一种谦卑之念；但也因为站在那渺小之外的山顶，使我生起一种豪情。这也是我喜欢看夜景的复杂情愫。</p>\n<p>一起站在山顶看夜景的情侣，情不自禁的紧紧相拥，像要一起融化于夜色中。是呀，在那广邈的夜景里，在那无数的灯光里，与相约而再来的人相遇，是在邈绝无情的飘游里，多么稀有殊胜难得的因缘！正如两只萤火虫在夜色相会，互相点着灯笼。</p>\n<p>于是，在微茫与冷凉的夜色里，以台北的夜景作证，紧紧相拥，渴望日后也可以在千盏万盏里，点亮自己的一盏灯火。</p>\n<p>我们继续在无灯的森林小路穿行，心里一片光明，因为我们即使渺若萤火，也自有夜景的航道。</p>\n<p>有航道的人，再渺小也不会迷途。</p>\n",
            "tags": [
                "阅读",
                "散文"
            ]
        },
        {
            "id": "http://kale-as.github.io/2021/10/17/%E8%8A%B1%E7%9A%84%E7%94%9F%E5%91%BD/",
            "url": "http://kale-as.github.io/2021/10/17/%E8%8A%B1%E7%9A%84%E7%94%9F%E5%91%BD/",
            "title": "花的生命",
            "date_published": "2021-10-17T08:08:00.000Z",
            "content_html": "<h1 id=\"花的生命\"><a class=\"anchor\" href=\"#花的生命\">#</a> 花的生命</h1>\n<p>在一次演讲之后，一个听众问我：&quot;林先生在演讲里一直叫我们爱护生命，可是演讲台上摆满了鲜花，难道花不是生命吗？为什么我们爱护动物的生命，不能爱一朵花的生命呢？&quot;</p>\n<p>确实，花也是一种生命，以佛教的观点看来，生命可以分成两种形态，一种是有情的生命，一种是无情的生命。</p>\n<p>凡是有生死的都是生命，即使是一朵花。一技草、一粒石头，也都是生命，但是有情的生命除了生死之外，有三种特质：</p>\n<p>一是有情感，有情爱的感受，例如会因情感的遭遇欢喜或悲伤、快乐或痛苦。</p>\n<p>二是有情欲，有情爱的欲望，为了满足这种欲望，企图。追求和奔波。</p>\n<p>三是有情识，有情爱的见解，思想和意识，希望自己的情爱圆满，达到理想的境地。</p>\n<p>我们如果伤害有情感、有情欲、有情识的众生，它立刻就会受到巨大的痛苦，例如我们如果把一只猫的头砍断摆在讲台上，那只猫立刻失去魂魄，看到的人也会感觉非常恐怖。</p>\n<p>但是花是没有情感、情欲、情识的生命，它被剪来插在花瓶，并不会立即有巨大的痛苦，它依然会美丽的开放，一直到凋谢的时候。</p>\n<p>理论上，真正爱惜生命的人，要珍惜一朵花、一枝草、一粒石头的生命，但是更急迫的是去爱那些有情感、有情欲、有情识的众生，以这种感同身受的爱，来开展我们内在爱的品质、慈悲的品质、柔软的品质。</p>\n<p>如果我们不能爱护有情的生命，又如何能疼惜那些无情的生命呢？</p>\n<p>花，以生命作为奉献，使我们感受到生活的美丽，让我们也愿自己的心如花一样美丽，来慈爱一切的生命，这样，一朵花的生命也就有了无比的价值。</p>\n",
            "tags": [
                "阅读",
                "散文"
            ]
        },
        {
            "id": "http://kale-as.github.io/2021/09/17/hello-world/",
            "url": "http://kale-as.github.io/2021/09/17/hello-world/",
            "title": "引言",
            "date_published": "2021-09-17T12:43:49.187Z",
            "content_html": "<h2 id=\"欢迎光临这里是浣熊小怜怜的网站-日常分享有问题可以留言评论也可以在github-上问我哦~~~\"><a class=\"anchor\" href=\"#欢迎光临这里是浣熊小怜怜的网站-日常分享有问题可以留言评论也可以在github-上问我哦~~~\">#</a> 欢迎光临！这里是浣熊小怜怜的网站🥳🥳 🥳，日常分享，有问题可以留言评论也可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0thbGUtYXM=\"> GitHub</span> ) 上问我哦～～～</h2>\n<blockquote>\n<p>💘 扣扣：1052447979</p>\n<p>💕WeChat：qql99101</p>\n</blockquote>\n",
            "tags": [
                "楔子"
            ]
        }
    ]
}